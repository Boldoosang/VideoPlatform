@model List<Video>

@{
    ViewData["Title"] = "Edited Video Library";

    var Modal = new Modal {
                Title = "Delete Video",
                Id = "deleteVideoModal",
                Body = "Are you sure you want to delete this video?",
                SubmissionButton = new SubmissionButton {
                    Action = "DeleteEditedVideo",
                    Text = "Confirm Delete",
                    CssClass = "btn btn-danger col-12 col-md-6",
                    Controller = "Admin",
                    Method = "post"
                }
            };
}

<div class="container text-center text-light pb-5 pt-3">
    <h2 class="display-4 fw-bold">Edited Video Library</h2>
    <p class="lead">Manage your edited video recordings, or manually upload a recording.</p>
    <a asp-action="UploadEdited" asp-controller="Admin" class="btn btn-primary rounded-pill px-5 mt-2 mb-0">
        <i class="bi bi-upload me-2"></i> Upload Edited Recording
    </a>
</div>

<div class="container mb-4" id="pendingJobsContainer" style="display: none;">
    <div class="card bg-dark text-light shadow">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0 py-2"><i class="bi bi-hourglass-split me-2"></i> Pending Video Jobs</h5>
        </div>
        <div class="card-body p-3">
            <div id="pendingJobsList">
            </div>
        </div>
    </div>
</div>

<hr class="mt-0 mb-1" />

<div class="container">
    @if (Model.Any()) {
        <div class="table-responsive">
            <table id="editedVideoTable" class="table table-dark table-bordered table-hover align-middle">
                <thead>
                    <tr>
                        <th style="width: 240px;">Video</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var video in Model) {
                        <tr style="height: 135px;">
                            <!-- Video Preview Column -->
                            <td class="p-0" style="width: 240px;">
                                <div class="ratio ratio-16x9 h-100 w-100">
                                    <video class="rounded shadow-sm"
                                           muted
                                           controls
                                           playsinline
                                           preload="metadata"
                                           style="object-fit: cover; width: 100%; height: 100%;">
                                        <source src="@video.FilePath#t=3" type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            </td>

                            <!-- Video Details Column -->
                            <td class="text-light p-3 align-top">
                                <div class="d-flex flex-column justify-content-between h-100">
                                    <!-- Title and Upload Date -->
                                    <div>
                                        <h5>@video.Title</h5>
                                        <p><small>@video.UploadDate.ToString("MMMM dd, yyyy")</small></p>
                                    </div>

                                    <!-- Action Buttons -->
                                    <div class="d-flex flex-column flex-md-row gap-3">
                                        <a asp-action="Edit"
                                           asp-controller="VideoEditor"
                                           asp-route-videoUrl="@video.FilePath"
                                           class="btn btn-primary d-flex align-items-center justify-content-center w-100">
                                            <i class="bi bi-pencil-square me-1"></i> Edit
                                        </a>
                                        <button type="button"
                                                class="btn btn-danger d-flex align-items-center justify-content-center w-100"
                                                data-bs-toggle="modal"
                                                data-bs-data="@(video.Title)"
                                                data-bs-target="#@(Modal.Id)">
                                            <i class="bi bi-trash3 me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else {
        <div class="alert alert-info text-center">
            <strong>No videos available</strong> – There are currently no Teams recordings in the library.
        </div>
    }
</div>

@await Html.PartialAsync("_ModalPartial", Modal)

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#editedVideoTable').DataTable({
                paging: true,
                searching: true,
                order: [[1, "desc"]],
                columnDefs: [
                    { orderable: true, targets: [0, 1] }
                ]
            });
        });
    </script>
    <script>
        const videoRendererBackendUrl = '@ViewData["VideoRendererBackendUrl"]';
        function loadPendingJobs() {
            fetch(`${videoRendererBackendUrl}/jobs`)
                .then(res => res.json())
                .then(data => {
                    const container = document.getElementById("pendingJobsContainer");
                    const list = document.getElementById("pendingJobsList");

                    list.innerHTML = ""; // Clear old items

                    if (data.jobs && data.jobs.length > 0) {
                        container.style.display = "block";

                        data.jobs.forEach(job => {
                            const jobElement = document.createElement("div");
                            jobElement.className = "mb-4";

                            const isError = job.progress === -1;
                            const isComplete = job.progress >= 100 && !isError;
                            const isInProgress = !isError && !isComplete;

                            const progressBarClass = isComplete
                                ? "bg-success"
                                : isError
                                    ? "bg-danger"
                                    : "bg-primary progress-bar-striped progress-bar-animated";

                            const progressDisplay = isError
                                ? `<span class="text-danger"><strong>Error</strong></span>`
                                : `<span><strong>${job.progress}%</strong></span>`;

                            const message = isComplete
                                ? `<div class="mt-2 text-success"><i class="bi bi-check-circle me-1"></i>
                                       Completed – <strong>refresh</strong> the page to see the new video.
                                   </div>`
                                : isError
                                    ? `<div class="mt-2 text-danger"><i class="bi bi-exclamation-triangle me-1"></i>
                                          An error occurred while rendering this video.
                                       </div>`
                                    : "";

                            jobElement.innerHTML = `
                                <div class="d-flex justify-content-between mb-2">
                                    <span><strong>Render Job ID:</strong> ${job.videoId}</span>
                                    ${progressDisplay}
                                </div>
                                <div class="progress bg-dark" role="progressbar" aria-label="Pending job progress">
                                    <div class="progress-bar ${progressBarClass}"
                                         style="width: ${isError ? '100' : job.progress}%">
                                    </div>
                                </div>
                                ${message}
                            `;
                            list.appendChild(jobElement);
                        });
                    } else {
                        container.style.display = "none";
                    }
                })
                .catch(err => {
                    console.error("Failed to fetch pending jobs:", err);
                });
        }

        loadPendingJobs();
        setInterval(loadPendingJobs, 5000);
    </script>
}
