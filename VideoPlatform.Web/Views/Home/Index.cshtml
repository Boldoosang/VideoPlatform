@model VideoPlatform.Domain.DTOs.PublishedVideoListingDTO
@{
    ViewData["Title"] = "Published Video Library";
}

<div class="container text-center text-light pb-5 pt-3">
    <h2 class="display-4 fw-bold">Published Video Library</h2>
    <p class="lead">Browse through seasons and standalone episodes available for viewing.</p>
</div>

<hr class="mt-0 mb-4" />

<div class="container">
    @if (Model.Seasons != null && Model.Seasons.Any())
    {
        @foreach (var season in Model.Seasons)
        {
            <div class="p-4 mb-4 border rounded-3 shadow-sm bg-dark">
                <h3 class="text-light fw-bold">@season.Title</h3>
                <p class="text-muted">@season.Description</p>

                @if (season.Episodes != null && season.Episodes.Any())
                {
                    <div class="row">
                        @foreach (var episode in season.Episodes.Where(e => e.IsPublished))
                        {
                            <div class="col-12 col-md-4 mb-4">
                                <div class="card shadow-lg border-0 rounded-3">
                                    <div class="card-body d-flex flex-column p-0">
                                        <a href="@Url.Action("Watch", "Episode", new { id = episode.Id })">
                                            <img src='@(episode.ThumbnailFilePath ?? "/images/placeholder-thumbnail.png")' id="thumbnail-@episode.Id" class="w-100 p-0 m-0 rounded-3" alt="@episode.Title" />
                                        </a>
                                        <div class="p-3 flex-grow-1">
                                            <h5 class="card-title mt-2 mb-0 text-light">@episode.Title</h5>
                                            <p class="card-text mt-1 mb-3 text-muted">
                                                <small>@episode.PublishDate.ToString("MMMM dd, yyyy")</small>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No episodes available in this season.</p>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-info" role="alert">
            No published seasons available.
        </div>
    }

    <div class="p-4 mb-4 border rounded-3 shadow-sm bg-dark mt-4">
        <h3 class="text-light fw-bold">Standalone Episodes</h3>
        <p class="text-muted">Episodes that are not part of a season</p>

        @if (Model.StandaloneEpisodes != null && Model.StandaloneEpisodes.Any())
        {
            <div class="row">
                @foreach (var episode in Model.StandaloneEpisodes)
                {
                    <div class="col-12 col-md-4 mb-4">
                        <div class="card shadow-lg border-0 rounded-3">
                            <div class="card-body d-flex flex-column p-0">
                                <a href="@Url.Action("Watch", "Episode", new { id = episode.Id })">
                                    <img src='@(episode.ThumbnailFilePath ?? "/images/placeholder-thumbnail.png")' id="thumbnail-@episode.Id" class="w-100 p-0 m-0 rounded-3" alt="@episode.Title" />
                                </a>
                                <div class="p-3 flex-grow-1">
                                    <h5 class="card-title mt-2 mb-0 text-light">@episode.Title</h5>
                                    <p class="card-text mt-1 mb-3 text-muted">
                                        <small>@episode.PublishDate.ToString("MMMM dd, yyyy")</small>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted">No standalone episodes available.</p>
        }
    </div>
</div>
